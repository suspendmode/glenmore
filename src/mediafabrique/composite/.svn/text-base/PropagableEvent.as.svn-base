/**
 * Copyright (C) Piotr Kucharski
 * email: suspendmode@gmail.com
 *
 * All rights reserved. Any use, copying, modification, distribution and selling
 * of this software and it's documentation for any purposes without authors' written
 * permission is hereby prohibited.
 */
package patterns.structural.composite {
  import flash.events.Event;
  
  import util.SearchUtil;
  
  
  /**
   *
   * @author Peter
   *
   */
  public class PropagableEvent extends Event {
    
    /**
     *
     * @param type
     * @param bubbles
     * @param cancelable
     *
     */
    public function PropagableEvent(type : String, bubbles : Boolean = false,
      cancelable : Boolean = false) {
      super(type, bubbles, cancelable);
    }
    
    /**
     *
     */
    private var _propagateEvent : Boolean = false;
    
    /**
     *
     * @param value
     *
     */
    public function set propagateEvent(value : Boolean) : void {
      _propagateEvent = value;
    }
    
    /**
     *
     * @return
     *
     */
    public function get propagateEvent() : Boolean {
      return _propagateEvent;
    }
    
    /**
     *
     * @param completeListener
     * @param errorListener
     *
     */
    public function propagate(completeListener : Function = null,
      errorListener : Function = null) : void {
      addCompleteListener(completeListener);
      addErrorListener(completeListener);      
    }
    
    /**
     *
     */
    private var completeListeners : Array = [];
    
    /**
     *
     */
    private var errorListeners : Array = [];
    
    
    /**
     *
     * @param listener
     *
     */
    public function addCompleteListener(listener : Function) : void {
      completeListeners.push(listener);
    }
    
    /**
     *
     * @param listener
     *
     */
    public function removeCompleteListener(listener : Function) : void {
      var index : int = SearchUtil.searchFor(completeListeners, listener);
      
      if (index >= 0) {
        completeListeners.splice(index, 1);
      }
    }
    
    /**
     *
     * @param listener
     *
     */
    public function addErrorListener(listener : Function) : void {
      errorListeners.push(listener);
    }
    
    /**
     *
     * @param listener
     *
     */
    public function removeErrorListener(listener : Function) : void {
      var index : int = SearchUtil.searchFor(errorListeners, listener);
      
      if (index >= 0) {
        errorListeners.splice(index, 1);
      }
    }
    
    /**
     *
     * @param data
     *
     */
    public function applyCompleteFunction(data : Object = null) : void {
      while (completeListeners.length) {
        var listener : Function = completeListeners.shift();
        
        if (data && listener.length) {
          listener.apply(data);
        } else {
          listener.apply();
        }
      }
    }
    
    /**
     *
     * @param info
     *
     */
    public function applyErrorFunction(info : Object = null) : void {
      while (errorListeners.length) {
        var listener : Function = errorListeners.shift();
        
        if (info && listener.length) {
          listener.apply(info);
        } else {
          listener.apply();
        }
      }
    }
  }
}