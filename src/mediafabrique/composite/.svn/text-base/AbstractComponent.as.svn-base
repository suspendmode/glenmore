/**
 * Copyright (C) Piotr Kucharski
 * email: suspendmode@gmail.com
 *
 * All rights reserved. Any use, copying, modification, distribution and selling
 * of this software and it's documentation for any purposes without authors' written
 * permission is hereby prohibited.
 */
package patterns.structural.composite {
  import logging.ILogger;
  import logging.Log;
  
  import flash.events.EventDispatcher;
  import flash.events.IEventDispatcher;
  
  import patterns.concurrency.event.CompoundEventDispatcher;
  import patterns.concurrency.event.ICompoundEventDispatcher;
  
  /**
   *
   * @author piku
   *
   */
  public class AbstractComponent extends CompoundEventDispatcher implements IComponent, ICompoundEventDispatcher {
    
    /**
     *
     */
    private static var log : ILogger = Log.getLogger(AbstractComponent);
    
    /**
     * 
     * @param id
     * @param eventDispatcher
     * 
     */
    public function AbstractComponent(id : String = null,
      eventDispatcher : IEventDispatcher = null) {
      super(eventDispatcher);
      
      if (id) {
        this.id = id;
      }      
    }
    
    /**
     *
     */
    private var _id : String;
    
    /**
     * @private
     */
    public function set id(value : String) : void {
      _id = value;
    }
    
    /**
     *
     */
    public function get id() : String {
      return _id;
    }
    
    /**
     *
     */
    private var _parent : ICompositeComponent;
    
    /**
     *
     * @param value
     *
     */
    public function set parent(value : ICompositeComponent) : void {
      _parent = value;
    }
    
    /**
     *
     * @return
     *
     */
    public function get parent() : ICompositeComponent {
      return _parent;
    }
  }
}