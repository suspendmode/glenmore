/**
 * Copyright (C) Piotr Kucharski
 * email: suspendmode@gmail.com
 *
 * All rights reserved. Any use, copying, modification, distribution and selling
 * of this software and it's documentation for any purposes without authors' written
 * permission is hereby prohibited.
 */
package util {
  import flash.utils.Dictionary;

  /**
   *
   * @author Peter
   *
   */
  public class ObjectFactory {

    /**
     *
     */
    private static var postFactoryFunctions : Dictionary = new Dictionary();

    /**
     *
     */
    {
      registerPostFactoryFunction(Object, applyPropertiesPostFactory);
    }

    /**
     *
     * @param instance
     * @param properties
     *
     */
    private static function applyPropertiesPostFactory(instance : Object, properties : Object) : void {
      var propertyNames : Array = TypeUtil.getReadableProperties(properties);

      for (var name : *in propertyNames) {
        instance[name] = properties[name];
      }
    }

    /**
     *
     * @param type
     * @param functionReference
     *
     */
    public static function registerPostFactoryFunction(type : Class, functionReference : Function) : void {
      var functions : Array;

      if (type in postFactoryFunctions) {
        functions = postFactoryFunctions[type];
      } else {
        functions = postFactoryFunctions[type] = [];
      }
      functions.push(functionReference);
    }

    /**
     *
     * @param type
     * @param functionReference
     *
     */
    public static function unregisterPostFactoryFunction(type : Class, functionReference : Function) : void {
      var functions : Array;

      if (type in postFactoryFunctions) {
        functions = postFactoryFunctions[type];
      } else {
        functions = postFactoryFunctions[type] = [];
      }

      ArrayUtil.remove(functions, functionReference);

      if (!functions.length) {
        delete functions[type];
      }
    }

    /**
     *
     * @param generator
     * @param properties
     * @return
     *
     */
    public static function createInstance(generator : Class, properties : Object = null,
      constructorArguments : Array = null) : * {
      var instance : * = FactoryUtil.createInstance(generator, constructorArguments);
      var types : Array = TypeUtil.getSuper(instance);

      for each (var type : Class in types) {
        var typeFunctions : Array = postFactoryFunctions[type];

        for each (var typeFunction : Function in typeFunctions) {
          typeFunction(instance, properties);
        }
      }
      return instance;
    }
  }
}